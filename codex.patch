diff --git a/app/api/websocket/websocket_server.py b/app/api/websocket/websocket_server.py
index 88fdf6b13acd92620d50ef48d2bf76095b0aa102..6c7e5aa2c330d839b0caa777e178192a9afc4839 100644
--- a/app/api/websocket/websocket_server.py
+++ b/app/api/websocket/websocket_server.py
@@ -1,94 +1,105 @@
 import asyncio
 import json
 import logging
 import uuid
 from typing import Dict, List, Optional, Any
 
 from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, Header
 from fastapi.middleware.cors import CORSMiddleware
 from pydantic import BaseModel
 
 # Import the AssistantBridge instead of DirectAssistantBridge
 from app.services.assistant_bridge import AssistantBridge
 from app.services.workato_integration import WorkatoConfig
+from services.service_db import DBService
 
 # Set up logging
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
 # Standard Workato configuration (you might want to load this from environment variables)
 WORKATO_CONFIG = WorkatoConfig(
     api_token="ad19767e318455a1daa7635b3e5f3ce4055f11376155b45c506ceb4f4f739d1c",
     endpoint_url="https://apim.workato.com/solconsult/assistant-tools-v1/workato-root-tool"
 )
 
 # Create FastAPI app
 app = FastAPI(title="OpenAI Agents WebSocket API")
 
 # Add CORS middleware
 app.add_middleware(
     CORSMiddleware,
     allow_origins=["*"],  # For production, specify actual origins
     allow_credentials=True,
     allow_methods=["*"],
     allow_headers=["*"],
 )
 
 # Store active connections
 active_connections: Dict[str, AssistantBridge] = {}
 
 @app.websocket("/ws")
 async def websocket_endpoint(websocket: WebSocket):
     """WebSocket endpoint for real-time chat with the assistant."""
     await websocket.accept()
     connection_id = str(uuid.uuid4())
     
     try:
         # Wait for connection parameters
         logger.info(f"New connection {connection_id} established, waiting for parameters")
         params_json = await websocket.receive_text()
         params = json.loads(params_json)
         
         # Validate required parameters
-        if not params.get("api_key") or not params.get("assistant_id"):
+        if not params.get("solomon_consumer_key") or not params.get("assistant_id"):
             await websocket.send_json({
                 "type": "error",
-                "error": "Missing required parameters: api_key and assistant_id are required"
+                "error": "Missing required parameters: solomon_consumer_key and assistant_id are required"
             })
             await websocket.close()
             return
         
         # Initialize the assistant bridge
         logger.info(f"Initializing AssistantBridge for connection {connection_id}")
-        api_key = params.get("api_key")
+        solomon_consumer_key = params.get("solomon_consumer_key")
         assistant_id = params.get("assistant_id")
         vector_store_ids = params.get("vector_store_ids")
+
+        # Retrieve OpenAI API key using DBService
+        openai_api_key = await DBService.get_openai_api_key(solomon_consumer_key)
+        if not openai_api_key:
+            await websocket.send_json({
+                "type": "error",
+                "error": "Invalid Solomon Consumer Key"
+            })
+            await websocket.close()
+            return
         
         try:
             bridge = AssistantBridge(
-                api_key=api_key,
+                api_key=openai_api_key,
                 assistant_id=assistant_id,
                 vector_store_ids=vector_store_ids
             )
             await bridge.initialize(workato_config=WORKATO_CONFIG)
             
             # Store the bridge instance
             active_connections[connection_id] = bridge
             
             # Notify client that the assistant is ready
             await websocket.send_json({
                 "type": "ready",
                 "message": "Assistant initialized successfully"
             })
             
             # Process messages
             while True:
                 # Wait for a message from the client
                 message_json = await websocket.receive_text()
                 message_data = json.loads(message_json)
                 
                 # Process commands
                 if message_data.get("type") == "command":
                     command = message_data.get("command")
                     
                     if command == "clear_history":
diff --git a/app/api/websocket_server.py b/app/api/websocket_server.py
index 1ec0d6f8316db69e6cc7adc5b43e75a87d313065..6eaf86e6e345e3e8bb6785c26d618171026274cd 100644
--- a/app/api/websocket_server.py
+++ b/app/api/websocket_server.py
@@ -1,119 +1,130 @@
 # Remove any imports like:
 # from app.services.agent_services.direct_bridge import DirectAssistantBridge
 # Remove any code that uses the DirectAssistantBridge class 
 
 # Replace any code that might be choosing between bridges:
 # bridge = DirectAssistantBridge(...) if use_direct_api else AssistantBridge(...)
 # With:
 bridge = AssistantBridge(...) 
 
 import asyncio
 import json
 import logging
 import uuid
 from typing import Dict, List, Optional, Any
 
 from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, Header
 from fastapi.middleware.cors import CORSMiddleware
 from pydantic import BaseModel
 
 # Import your existing services
 from app.services.assistant_bridge import AssistantBridge
 from app.services.workato_integration import WorkatoConfig
+from services.service_db import DBService
 
 # Set up logging
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
 # Standard Workato configuration (you might want to load this from environment variables)
 WORKATO_CONFIG = WorkatoConfig(
     api_token="ad19767e318455a1daa7635b3e5f3ce4055f11376155b45c506ceb4f4f739d1c",
     endpoint_url="https://apim.workato.com/solconsult/assistant-tools-v1/workato-root-tool"
 )
 
 # Create FastAPI app
 app = FastAPI(title="OpenAI Agents WebSocket API")
 
 # Add CORS middleware
 app.add_middleware(
     CORSMiddleware,
     allow_origins=["*"],  # For production, specify actual origins
     allow_credentials=True,
     allow_methods=["*"],
     allow_headers=["*"],
 )
 
 # Models for connection parameters
 class ConnectionParams(BaseModel):
-    api_key: str
+    solomon_consumer_key: str
     assistant_id: str
     vector_store_ids: Optional[List[str]] = None
     thread_id: Optional[str] = None  # Add thread_id to support conversation persistence
 
 # Store active connections and their associated thread IDs
 active_connections: Dict[str, AssistantBridge] = {}
 thread_connections: Dict[str, str] = {}  # Maps thread_ids to connection_ids
 
 # Authentication dependency
 async def get_api_key(x_api_key: str = Header(None)):
     if not x_api_key:
         raise HTTPException(status_code=401, detail="API key is required")
     # In production, you would validate the API key against your database
     return x_api_key
 
 @app.websocket("/ws")
 async def websocket_endpoint(websocket: WebSocket):
     """WebSocket endpoint for real-time chat with the assistant."""
     await websocket.accept()
     connection_id = str(uuid.uuid4())
     
     try:
         # Wait for connection parameters
         logger.info(f"New connection {connection_id} established, waiting for parameters")
         params_json = await websocket.receive_text()
         params = json.loads(params_json)
         
         # Validate required parameters
-        if not params.get("api_key") or not params.get("assistant_id"):
+        if not params.get("solomon_consumer_key") or not params.get("assistant_id"):
             await websocket.send_json({
                 "type": "error",
-                "error": "Missing required parameters: api_key and assistant_id are required"
+                "error": "Missing required parameters: solomon_consumer_key and assistant_id are required"
             })
             await websocket.close()
             return
         
         # Initialize the assistant bridge
         logger.info(f"Initializing AssistantBridge for connection {connection_id}")
-        api_key = params.get("api_key")
+        solomon_consumer_key = params.get("solomon_consumer_key")
         assistant_id = params.get("assistant_id")
         vector_store_ids = params.get("vector_store_ids")
+
+        # Retrieve OpenAI API key using DBService
+        openai_api_key = await DBService.get_openai_api_key(solomon_consumer_key)
+        if not openai_api_key:
+            await websocket.send_json({
+                "type": "error",
+                "error": "Invalid Solomon Consumer Key"
+            })
+            await websocket.close()
+            return
         thread_id = params.get("thread_id")  # Get thread_id if provided
-        
+
         try:
             bridge = AssistantBridge(
-                api_key=api_key,
+                api_key=openai_api_key,
                 assistant_id=assistant_id,
                 vector_store_ids=vector_store_ids
             )
             await bridge.initialize(workato_config=WORKATO_CONFIG)
             
             # If thread_id is provided, restore the conversation state
             if thread_id:
                 bridge.session_memory.set_thread_id(thread_id)
                 # Load any existing conversation history for this thread
                 # (assuming you have implemented this in your storage layer)
             else:
                 # Generate new thread_id for new conversations
                 thread_id = str(uuid.uuid4())
                 bridge.session_memory.set_thread_id(thread_id)
             
             # Store the bridge instance and thread mapping
             active_connections[connection_id] = bridge
             thread_connections[thread_id] = connection_id
             
             # Notify client that the assistant is ready
             await websocket.send_json({
                 "type": "ready",
                 "message": "Assistant initialized successfully",
                 "thread_id": thread_id
             })
diff --git a/tests/test_websocket_client.py b/tests/test_websocket_client.py
index c2bf4aef302fb4088b15b9a2b68b7441ddb90ff7..36c6677ebe63a18067d52b85f4810b292e67b212 100644
--- a/tests/test_websocket_client.py
+++ b/tests/test_websocket_client.py
@@ -1,47 +1,47 @@
 #!/usr/bin/env python
 import asyncio
 import websockets
 import json
 import sys
 import argparse
 import logging
 import os
 
 # Configure logging
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
-async def test_websocket_client(api_key, assistant_id, vector_store_ids=None):
+async def test_websocket_client(solomon_consumer_key, assistant_id, vector_store_ids=None):
     """Test the WebSocket API with streaming responses."""
     uri = "ws://localhost:8000/ws"
     print(f"Connecting to {uri}...")
     
     async with websockets.connect(uri) as websocket:
         # Send connection parameters
         await websocket.send(json.dumps({
-            "api_key": api_key,
+            "solomon_consumer_key": solomon_consumer_key,
             "assistant_id": assistant_id,
             "vector_store_ids": vector_store_ids
         }))
         
         # Wait for ready message
         response = await websocket.recv()
         response_data = json.loads(response)
         print(f"Server: {response}")
         
         if response_data.get("type") == "error":
             print(f"Error: {response_data.get('error')}")
             return
         
         # Start interactive mode
         print("\n=== Interactive WebSocket Test ===")
         print("Type your messages, or 'exit' to quit")
         
         while True:
             # Get user input
             user_input = input("You: ")
             
             if user_input.lower() == "exit":
                 break
             
             # Send message to server
@@ -71,40 +71,40 @@ async def test_websocket_client(api_key, assistant_id, vector_store_ids=None):
                         elif response_data.get("tool") == "output":
                             print(f"\n[Tool output: {response_data.get('content', '')}]", end="", flush=True)
                     elif response_data.get("type") == "completion":
                         # Stream complete
                         print()  # Add newline
                         break
                     elif response_data.get("type") == "error":
                         # Error occurred
                         print(f"\nError: {response_data.get('error')}")
                         break
                     elif response_data.get("type") == "system":
                         # System message
                         if "Processing" not in response_data.get("message", ""):
                             print(f"\nSystem: {response_data.get('message')}")
                     elif response_data.get("type") == "response":
                         # Non-streaming response
                         print(response_data.get("content", ""))
                         break
                 except Exception as e:
                     logger.error(f"Error in WebSocket communication: {str(e)}")
                     print(f"\nConnection error: {str(e)}")
                     return
 
 def main():
     parser = argparse.ArgumentParser(description="Test the WebSocket API")
-    parser.add_argument("api_key", help="OpenAI API key")
+    parser.add_argument("solomon_consumer_key", help="Solomon Consumer Key")
     parser.add_argument("assistant_id", help="OpenAI Assistant ID")
     parser.add_argument("--vector-stores", nargs="+", help="Vector store IDs for file search")
     
     args = parser.parse_args()
     
     try:
-        asyncio.run(test_websocket_client(args.api_key, args.assistant_id, args.vector_stores))
+        asyncio.run(test_websocket_client(args.solomon_consumer_key, args.assistant_id, args.vector_stores))
     except KeyboardInterrupt:
         print("\nTest terminated by user")
     except Exception as e:
         print(f"Error: {str(e)}")
 
 if __name__ == "__main__":
     main() 
\ No newline at end of file
diff --git a/websocket_test.html b/websocket_test.html
index 0628488917ed737c10a10cc7dc7708f74aeaeddc..ac268f7dbed2de61942310b8d30b7de33c2fe1ff 100644
--- a/websocket_test.html
+++ b/websocket_test.html
@@ -64,52 +64,52 @@
             color: #cc0000;
         }
     </style>
 </head>
 <body>
     <h1>WebSocket Test Client</h1>
     <div class="status disconnected" id="connectionStatus">Disconnected</div>
     
     <div class="container">
         <div class="input-group">
             <label for="serverUrl">WebSocket URL:</label>
             <input type="text" id="serverUrl" value="ws://localhost:8080/ws/assistant/">
         </div>
         
         <div class="input-group">
             <label for="assistantId">Assistant ID:</label>
             <input type="text" id="assistantId" value="test-assistant-123">
         </div>
         
         <div class="button-group">
             <button onclick="connectWebSocket()">Connect</button>
             <button onclick="disconnectWebSocket()">Disconnect</button>
         </div>
         
         <div class="input-group">
-            <label for="apiKey">API Key:</label>
-            <input type="text" id="apiKey" value="">
+            <label for="solomonConsumerKey">Solomon Consumer Key:</label>
+            <input type="text" id="solomonConsumerKey" value="">
             <button onclick="initialize()">Initialize Assistant</button>
         </div>
         
         <div class="input-group">
             <label for="message">Message:</label>
             <input type="text" id="message" value="Hello, how can you help me today?">
             <button onclick="sendMessage()">Send Message</button>
         </div>
         
         <button onclick="clearHistory()">Clear Conversation History</button>
         
         <div class="input-group">
             <button onclick="clearLog()">Clear Log</button>
         </div>
         
         <h3>Message Log:</h3>
         <pre id="messageLog"></pre>
     </div>
 
     <script>
         let socket = null;
         
         function connectWebSocket() {
             if (socket && socket.readyState === WebSocket.OPEN) {
                 appendLog("Already connected", "error");
@@ -152,59 +152,59 @@
                 socket.onerror = function(error) {
                     appendLog(`WebSocket Error: ${error.message || "Unknown error"}`, "error");
                 };
                 
             } catch (error) {
                 appendLog(`Failed to connect: ${error.message}`, "error");
             }
         }
         
         function disconnectWebSocket() {
             if (!socket) {
                 appendLog("Not connected", "error");
                 return;
             }
             
             socket.close();
             socket = null;
         }
         
         function initialize() {
             if (!socket || socket.readyState !== WebSocket.OPEN) {
                 appendLog("Not connected to WebSocket", "error");
                 return;
             }
             
-            const apiKey = document.getElementById('apiKey').value.trim();
+            const apiKey = document.getElementById('solomonConsumerKey').value.trim();
             if (!apiKey) {
-                appendLog("API Key is required", "error");
+                appendLog("Solomon Consumer Key is required", "error");
                 return;
             }
             
             const data = {
                 type: "initialize",
-                api_key: apiKey,
+                solomon_consumer_key: apiKey,
                 vector_store_ids: []
             };
             
             sendData(data);
         }
         
         function sendMessage() {
             if (!socket || socket.readyState !== WebSocket.OPEN) {
                 appendLog("Not connected to WebSocket", "error");
                 return;
             }
             
             const message = document.getElementById('message').value;
             if (!message) {
                 appendLog("Message is empty", "error");
                 return;
             }
             
             const data = {
                 type: "chat_message",
                 message: message
             };
             
             sendData(data);
         }
