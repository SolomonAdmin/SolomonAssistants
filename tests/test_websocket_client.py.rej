diff a/tests/test_websocket_client.py b/tests/test_websocket_client.py	(rejected hunks)
@@ -1,48 +1,47 @@
 #!/usr/bin/env python
 import asyncio
 import websockets
 import json
 import sys
 import argparse
 import logging
 import os
 
 # Configure logging
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
-async def test_websocket_client(api_key, assistant_id, vector_store_ids=None):
+async def test_websocket_client(solomon_consumer_key, assistant_id, vector_store_ids=None):
     """Test the WebSocket API with streaming responses."""
-    uri = "ws://localhost:8000/ws"
+    uri = f"ws://localhost:8000/ws/assistant/{assistant_id}"
     print(f"Connecting to {uri}...")
     
     async with websockets.connect(uri) as websocket:
         # Send connection parameters
         await websocket.send(json.dumps({
-            "api_key": api_key,
-            "assistant_id": assistant_id,
+            "solomon_consumer_key": solomon_consumer_key,
             "vector_store_ids": vector_store_ids
         }))
         
         # Wait for ready message
         response = await websocket.recv()
         response_data = json.loads(response)
         print(f"Server: {response}")
         
         if response_data.get("type") == "error":
             print(f"Error: {response_data.get('error')}")
             return
         
         # Start interactive mode
         print("\n=== Interactive WebSocket Test ===")
         print("Type your messages, or 'exit' to quit")
         
         while True:
             # Get user input
             user_input = input("You: ")
             
             if user_input.lower() == "exit":
                 break
             
             # Send message to server
             await websocket.send(json.dumps({
@@ -71,40 +70,40 @@ async def test_websocket_client(api_key, assistant_id, vector_store_ids=None):
                         elif response_data.get("tool") == "output":
                             print(f"\n[Tool output: {response_data.get('content', '')}]", end="", flush=True)
                     elif response_data.get("type") == "completion":
                         # Stream complete
                         print()  # Add newline
                         break
                     elif response_data.get("type") == "error":
                         # Error occurred
                         print(f"\nError: {response_data.get('error')}")
                         break
                     elif response_data.get("type") == "system":
                         # System message
                         if "Processing" not in response_data.get("message", ""):
                             print(f"\nSystem: {response_data.get('message')}")
                     elif response_data.get("type") == "response":
                         # Non-streaming response
                         print(response_data.get("content", ""))
                         break
                 except Exception as e:
                     logger.error(f"Error in WebSocket communication: {str(e)}")
                     print(f"\nConnection error: {str(e)}")
                     return
 
 def main():
     parser = argparse.ArgumentParser(description="Test the WebSocket API")
-    parser.add_argument("api_key", help="OpenAI API key")
+    parser.add_argument("solomon_consumer_key", help="Solomon Consumer Key")
     parser.add_argument("assistant_id", help="OpenAI Assistant ID")
     parser.add_argument("--vector-stores", nargs="+", help="Vector store IDs for file search")
     
     args = parser.parse_args()
     
     try:
-        asyncio.run(test_websocket_client(args.api_key, args.assistant_id, args.vector_stores))
+        asyncio.run(test_websocket_client(args.solomon_consumer_key, args.assistant_id, args.vector_stores))
     except KeyboardInterrupt:
         print("\nTest terminated by user")
     except Exception as e:
         print(f"Error: {str(e)}")
 
 if __name__ == "__main__":
-    main() 
\ No newline at end of file
+    main() 
